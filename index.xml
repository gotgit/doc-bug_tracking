<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"   
	"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
<!ENTITY % vers   SYSTEM "version.xml">
%vers;
<!ENTITY author "<ulink url='mailto:worldhello.net＠gmail.com'>Johnson</ulink>">
<!ENTITY orgname "<ulink url='http://www.worldhello.net'>worldhello.net</ulink>">
]>
<article id="index">
<articleinfo>
<title>缺陷追踪系统 HOWTO</title>
<author><firstname>鑫</firstname><surname>蒋</surname></author>
<affiliation>
<orgname>&orgname;</orgname>
<address><email>worldhello.net＠gmail.com</email></address>
</affiliation>
<revhistory>
<revision>
<revnumber>0.3</revnumber>
<date>2006/04</date>
<authorinitials>jiangxin</authorinitials>
<revremark>增加 Mantis hacking</revremark>
</revision>

<revision>
<revnumber>0.2</revnumber>
<date>2003/06</date>
<authorinitials>jiangxin</authorinitials>
<revremark>Gnats Howto</revremark>
</revision>

<revision>
<revnumber>0.1</revnumber>
<date>2002/02</date>
<authorinitials>jiangxin</authorinitials>
<revremark>Starteam Change Request Howto</revremark>
</revision>
</revhistory>
<abstract>
<para>

</para>
<para>
（编译自版本: &doc.revision;，最后更新时间: &doc.lastchange;）
</para>
</abstract>
</articleinfo>

<sect1 id="why-bug-tracking"><title>缺陷追踪</title>
<para>
开发人员都希望自己的产品技术领先，好用，没有缺陷（BUG）。但一个能称为产品的软件项目，没有出现过 BUG 是不可以想像的，如果一个项目能够经过较充分的测试，也许可以将绝大多数 BUG 限制在软件发布前，在内部发现并解决，但用户的环境千差万别，总有挂万漏一。即便一时没有发现缺陷，但是需求变更总是有的，客户可能发现软件中有的功能不适用，于是便提出新的需求。这些软件缺陷、需求变更应被看做是软件不断成熟、发展的动力。软件开发中需要对这些缺陷报告、需求变更进行有效的跟踪和控制，这就是我们在这里要讨论的主题：缺陷追踪。
</para>
<para>
缺陷追踪，或称为：Bug Tracking, Defect Tracking，是软件开发和维护过程中重要的辅助软件，用于跟踪记录软件的缺陷、需求变更等，作为沟通开发人员与测试人员、客户的沟通的桥梁，保障软件开发流程更加协调。让我们看一个典型的例子：
</para>
<para>
测试人员、客户将软件的缺陷或称BUG，通过缺陷追踪软件提交给开发人员；开发人员根据测试人员、客户提交的 BUG 的现象、描述、重现条件等数据对该缺陷进行分析，修正完成后，除了将修正的代码提交，编译成产品，还要修改缺陷追踪软件中记录的对应的缺陷的状态，将其状态改为“已经修正”；现在球又传到了测试人员手中，测试人员对新编译的产品进行测试，看是否真的已经修正了这个缺陷，如果没有完成修正，重新将缺陷的状态改为“尚未修正”；如果经过测试发现已经修正，则将缺陷的状态改正为“关闭”。
</para>
<para>
从上面的例子中，我们可以看出，缺陷有自己的生存周期。一般缺陷追踪软件把缺陷的生存周期的各个阶段用“状态”来描述，例如 Starteam 中描述 Change Request 就使用了如下的状态：
</para>
<para>
"New" 代表新提交的 bug；"Open" 代表已经分配了的 bug；"In Progress" 代表已经进入修正阶段；"Fixed" 代表已经修正；"Cannot Reproduce" 代表未能重现的 Bug；"As Designed" 代表依据原设计正常的行为，并非 Bug；"Documented" 代表已经记录；"Is Duplicate" 代表重复提交的 Bug；"Deferred" 代表延期的 Bug；还有相应的确认状态，"Verified Cannot Reproduce", "Verified As Designed", "Verified Fixed", "Verified Documented", "Verified Is Duplicate", "Verified Deferred"；和相应的关闭状态，"Closed(Cannot Reproduce)", "Closed(As Designed)", "Closed(Fixed)", "Closed(Documented)", "Closed(Is Duplicate)", "Closed(Deferred)"。
</para>
<para>
缺陷追踪软件应具有通知功能。Bug 的变更应该能够通过邮件通知相关的负责人。
</para>
<para>
缺陷追踪软件应具有查询功能。例如：查询那些是属于本人负责的缺陷；查询仍处于 open 状态的 bug；
</para>
<para>
缺陷追踪软件应具有统计功能，能够统计一段时期每个人发现的 BUG 数量，BUG 的平均修正时间，一个产品周期发现的 BUG 总数等等。这些统计数字对于软件测量具有重要意义。
</para>
<para>
缺陷追踪的软件非常之多，在 Dave Eaton 的主页上，有一个 Bug Tracking 的软件列表：<ulink url="http://www.daveeaton.com/scm/PMTools.html">http://www.daveeaton.com/scm/PMTools.html</ulink>，其中大部分我甚至闻所未闻。要在如此众多的缺陷追踪软件中做出选择，实在是困难的事情。Rational 的 ClearQuest，Starbase 的 Starteam （已被 Borland 收购），等是非常知名的商业软件，当然其价格也不菲，我们将先通过对 Starteam 的缺陷追踪流程做一演示，以理解缺陷追踪的概念。GNATS 和 BUGZILLA 是开放源码中的非常好的缺陷追踪软件，将在后面拿来作以详细介绍，因为它们不但功能够用，又没有 Licesnse 上的限制。
</para>
</sect1>

<sect1 id="starteam"><title>Starteam Change Request Howto</title>
<para>
Starteam 是 Starbase 公司在软件配置管理领域的重要的产品，集版本控制、缺陷追踪于一身。Starbase 于2002年底被 Borland 公司收购，Starteam 这一款产品将会紧密集成到 Borland 的产品中去，相信 Starteam 这一产品将伴随 Borland 深受开放人员爱戴的 RAD 开发工具一起，被更多的人所熟知。Delphi 8.0 已经将 Starteam 集成为内置的版本控制系统。我们这里主要介绍 Starteam 的缺陷追踪的功能。
</para>
<para>
相关网址：
</para>
<itemizedlist>
<listitem>
<para>
<ulink url="http://www.starbase.com/">http://www.starbase.com/</ulink>
</para>
</listitem>
<listitem>
<para>
<ulink url="http://www.borland.com/starteam/index.html">http://www.borland.com/starteam/index.html</ulink>
</para>
</listitem>
</itemizedlist>

<sect2><title>Starteam Change Request 工作流程</title>
<para>
Starteam 中的称缺陷为 "Change Request"，简称 CR。下面通过一个实例介绍 Starteam 的缺陷追踪的工作流程。
</para>

<orderedlist>
<listitem>
<para>
打开项目视图
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-1-openprj.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>打开名为 StarDraw 的演示工程</phrase>
</textobject>
<caption>
<para>
打开名为 StarDraw 的演示工程
</para>
</caption>
</mediaobject>

<mediaobject>
<imageobject>
<imagedata fileref="images/st-2-openview.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>打开名为 WorldHello_Branch 的分支（视图）</phrase>
</textobject>
<caption>
<para>
打开名为 WorldHello_Branch 的分支（视图）
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
显示 Change Request 列表
</para>
<para>
Starteam 的视图中，左侧的面板显示的是文件夹列表，右侧上边的面板是主要的任务区，选择 Change Request 页，则查看当前目录下的 Change Request 列表。
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-3-buglist.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>缺陷控制目录下的 Change Request 列表</phrase>
</textobject>
<caption>
<para>
缺陷控制目录下的 Change Request 列表
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
以 test1（测试工程师1）登录，提交新发现的 bug；
</para>
<para>
在模块1的目录下输入新的 Change Request。
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-4-test1-new.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
输入 Change Request 的概要（synopsis），指定模块的负责人。如果不清楚负责人，可以指定开发经理（devleader）为该 Change Request 的负责人（Responsibility）。
</para>
</caption>
</mediaobject>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-5-test1-new-desc.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
输入该 Change Request 的详细描述、重现方法等信息。
</para>
</caption>
</mediaobject>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-6-test1-new-bug.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
完成该 Change Request 的提交。
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
开发经理收到邮件
</para>
<para>
测试工程师1 在 Starteam 中提交 Change Request，并指定负责人为开发经理（devleader）后，Starteam 自动向开发经理发送通知邮件。
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-7-test1-sendmail.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
开发经理收到邮件
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
开发经理将修正该 Change Request 的任务分配到相应的开发工程师
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-8-devleader-view.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
开发经理打开 Starteam 相应视图，属于其本人负责的 Change Request 加亮显示。
</para>
</caption>
</mediaobject>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-9-devleader-assign.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
开发经理将该 Change Request 的负责人指定为 dev1 （开发工程师1）。
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
Starteam 的 Change Request 亦被版本控制
</para>
<para>
test1 用户提交的 Change Request，再经过 devleader 用户的修改，产生了两版本，如下：
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-10-devleader-vc.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
右侧下方切换到 history 面板，显示两个版本。
</para>
</caption>
</mediaobject>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-11-devleader-diff.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
比较两个版本的 Change Request 的差异。
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
开发工程师 1 收到开发经理的邮件
</para>
<para>
开发经理将Change Request 的负责人指定为 dev1 后，开发工程师 1 收到邮件。
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-12-devleader-mail.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
开发工程师 1 收到邮件
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
开发工程师修正 Bug，回填 Change Request。
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-14-dev1-status.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
开发工程师将 Change Request 的状态修改为 "In Progress"，表明自己已经注意到该问题，并正在修改当中。
</para>
</caption>
</mediaobject>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-13-dev1-solution.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
修改完毕、提交代码、重新编译产品之后，在 Solution（解决方案）域填写解决方案，并将 Change Request 的状态修改为 "Fixed"。Starteam 会自动向该 Change Request 的提出者 test1 发出该 Change Request 已经修复的 Email 通知。
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
测试工程师对修正进行测试，测试通过则将该 Change Request 状态设置为 "Verified Fixed"
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-15-test1-verify.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
测试工程师对该 Change Request 的修正进行测试，测试通过则将该 Change Request 状态设置为 "Verified Fixed"
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
测试经理（testleader）定期检查 Change Request 状态，复核并关闭 Change Request
</para>
<para>
测试经理可以利用 Starteam 的 Filter 中的 "By Status &amp; Responsibility"，以分组的形式查看所有的 Change Request。对于长时间处于 "New" 和 "Open" 的 
Change Request 要督促相关人员注意，对于处于 "Verified Fixed" 的 Change Request，要进行复核，对于确实完成修正的将状态改为 "Closed"。
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-16-testleader-list.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
按照状态和负责人格式查看 Change Request
</para>
</caption>
</mediaobject>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-17-testleader-close.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
对于处于 "Verified Fixed" 的 Change Request，要进行复核，对于确实完成修正的将状态改为 "Closed"
</para>
</caption>
</mediaobject>
</listitem>
</orderedlist>

<para>
如上，就是一个最基本的 Change Request 生存期模型。如果我们再查看这个 Change Request 的改动历史，更加直观。
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/st-cr-history.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
该 Change Request 的版本控制历史
</para>
</caption>
</mediaobject>

<para>
上面的例子中，涉及到好几个角色，这些角色的名字，是可以由用户自定义的。
</para>

<mediaobject>
<imageobject>
<imagedata fileref="images/st-usrmgr.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
Starteam 的用户管理界面
</para>
</caption>
</mediaobject>

<mediaobject>
<imageobject>
<imagedata fileref="images/st-usrmgr-mailconf.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
设置用户的邮件地址
</para>
</caption>
</mediaobject>

</sect2>

<sect2><title>Starteam 缺陷追踪的优缺点</title>
<para>
优点：
</para>
<itemizedlist>
<listitem>
<para>
易用的图形界面；
</para>
</listitem>
<listitem>
<para>
支持工程的分支管理，即不同的分支管理各自的 Change Request；
</para>
</listitem>
<listitem>
<para>
支持 Change Quest 本身的版本控制；
</para>
<para>
Change Request 和代码一样可以进行版本控制，亦可以对不同版本的 Change Request 进行对比；
</para>
</listitem>
</itemizedlist>

<para>
缺点：
</para>
<itemizedlist>
<listitem>
<para>
商业软件，价格不菲；
</para>
</listitem>
<listitem>
<para>
商业软件，功能扩展受限；
</para>
</listitem>
<listitem>
<para>
依赖于数据库，如果数据库崩溃，难以恢复；
</para>
<para>
但是除了 GNATS 等以外的缺陷追踪系统都依赖数据库，看来功能、性能和一些管理上的便捷、安全性有时是矛盾的。
</para>
</listitem>
</itemizedlist>

<para>
Starteam 还有一个特点：即必须手工指定 CR 的责任人，一般是由 Bug 提交者，而在有的情况下几乎不可能，因此有时需要靠他人如开发经理指定。后面介绍的缺陷追踪软件有的可以根据提交的缺陷的分类自动指定责任人，并发送邮件通知。说不清这个特点到底是优点还是缺点，只能是仁者见仁，智者见智了。
</para>

</sect2>

</sect1>

<sect1 id="gnats"><title>GNATS</title>
<para>
GNATS 是大名鼎鼎的 GNU 维护和使用的 Bug 跟踪系统。GNATS 将受管理的缺陷叫做 "Problem Report" （问题报告），简称为 "PR"。用户可以直接使用 Email 向系统提交 PR，亦可以使用基于 WEB 的图形界面提交。GNATS 的功能大体上等同于前面介绍的 Starteam 的 Change Request 管理。
</para>
<para>
gnat 在英文字典中含义为：“小昆虫，小烦扰”，其读音中 g 不发音，而单词 GNATS 中的 G 是发音的。
</para>

<para>
相关网址：
</para>
<itemizedlist>
<listitem>
<para>
GNATS 官方网址
</para>
<para>
<ulink url="http://www.gnu.org/software/gnats/">http://www.gnu.org/software/gnats</ulink>
</para>
</listitem>
<listitem>
<para>
GNATS 下载地址
</para>
<para>
<ulink url="ftp://ftp.gnu.org/pub/gnu/gnats/">ftp://ftp.gnu.org/pub/gnu/gnats/</ulink>
</para>
</listitem>
<listitem>
<para>
源代码
</para>
<para>
<ulink url="http://savannah.gnu.org/projects/gnats">http://savannah.gnu.org/projects/gnats</ulink>
</para>
</listitem>
<listitem>
<para>
Gnatsweb
</para>
<para>
<ulink url="http://savannah.gnu.org/projects/gnatsweb">http://savannah.gnu.org/projects/gnatsweb</ulink>
</para>
</listitem>
</itemizedlist>

<sect2><title>GNATS 特点</title>

<orderedlist>
<listitem>
<para>
GNATS 特点
</para>

<itemizedlist>
<listitem>
<para>
将通过 Email 或者 Web 界面提交的问题报告管理起来，并通过 Email 报告给责任人；
</para>
</listitem>
<listitem>
<para>
GNATS 通过设置 PR 的分类（category）和分类的负责人，实现当一个 PR 提交后，自动向负责人发送邮件通知。而且，GNATS 也可以配置当一个 PR 在设定的时间没有响应的时候，自动向负责人再次发送邮件询问；
</para>
</listitem>
<listitem>
<para>
可以通过界面对问题报告进行后续的变更，也提供了查询问题报告的界面；
</para>
</listitem>
<listitem>
<para>
通过文件而不是数据库来存储和管理问题报告，因此更可靠；
</para>
</listitem>
<listitem>
<para>
开放源码，没有版权问题；
</para>
</listitem>
<listitem>
<para>
提供了扩充接口，并且用户可以进行二次开放，以扩充功能。
</para>
</listitem>
</itemizedlist>
</listitem>

<listitem>
<para>
GNATS 确省使用如下术语语描述 PR （问题报告）的状态：
</para>
<itemizedlist>
<listitem>
<para>
open
</para>
<para>
初始状态是 "Open"，表明一个 PR 已经提交但尚未处理，相关的负责人会收到 Email 通知；
</para>
</listitem>
<listitem>
<para>
analyzed
</para>
<para>
当一个 PR 被提交之后，负责人收到通知，将 PR 状态设置为 "analyzed"，开始着手处理该 PR；
</para>
</listitem>
<listitem>
<para>
feedback
</para>
<para>
当责任人找到相应的解决方案后，将该 PR 的状态设置为 "feedback"，并回填 PR 中解决方案（solution）字段；
</para>
</listitem>
<listitem>
<para>
closed
</para>
<para>
当 PR 的提交者，确认该 PR 描述的问题已经解决，就将该 PR 的状态设置为 "closed"。
</para>
</listitem>
<listitem>
<para>
suspended
</para>
<para>
当一个 PR 没有时间或者当前存在困难，可以设置为 "suspended"，意为延期。
</para>
</listitem>
</itemizedlist>
<note>
<para>
上面描述的是 GNATS 的确省的状态和工作方式，最新版本的 GNATS 4 已经支持用户定制 PR 的状态，后面我们将举例说明；
</para>
<para>
GNATS 不像 Starteam 那么直观的对缺陷进行版本控制，而是通过 PR 的一个名为 "Audit-Trail" 的字段跟踪修改记录。
</para>
</note>
</listitem>
</orderedlist>
</sect2>

<sect2><title>GNATS PR 流程示例</title>
<para>
GNU 开放源码的很多项目的缺陷追踪即使用 GNATS，我们先到 GNU 的缺陷追踪网站上面看一看：<ulink url="http://bugs.gnu.org/cgi-bin/gnatsweb.pl">http://bugs.gnu.org/cgi-bin/gnatsweb.pl</ulink>。
</para>

<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-1-gnu-login.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>GNU Bug Tracking 网站登录画面</phrase>
</textobject>
<caption>
<para>
GNU Bug Tracking 网站登录画面
</para>
</caption>
</mediaobject>

<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-2-gnu-query1.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>查询 Bug</phrase>
</textobject>
<caption>
<para>
查询 Bug 画面：输入查询条件
</para>
</caption>
</mediaobject>

<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-3-gnu-query2.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>查询 Bug</phrase>
</textobject>
<caption>
<para>
查询 Bug 画面：显示查询结果
</para>
</caption>
</mediaobject>

<para>
如果读者在 GNU 的缺陷追踪网站上没有正式的用户账号，就不能体验一个完整的缺陷追踪流程。下面通过搭建的一个临时服务器作为演示，服务器搭建流程见后面的章节。
</para>

<itemizedlist>
<listitem>
<para>
以 test1（测试工程师1）登录，提交新发现的 bug；
</para>
<para>
test1 的权限是 "edit"，以 test1 用户的身份登录后，在模块1的分类下输入新的 PR。
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-4-test1-main.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
test1 用户登录后的主画面
</para>
</caption>
</mediaobject>
<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-5-test1-new.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
向模块１提交 PR，模块的负责人无需指定，选择好分类（Category） 即可。
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
test1 用户收到反馈邮件
</para>
<para>
test1 用户收到 gnats-admin 用户发送的反馈邮件，表明正确提交了 PR；
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-6-test1-feedback.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
test1 用户收到的反馈邮件
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
模块1 的负责人收到邮件通知
</para>
<para>
dev1 用户是模块1 的负责人，test1 用户提交 PR 之后，dev1 用户收到系统发出的邮件通知；
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-7-dev1-mail.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
dev1 用户收到 test1 用户发出的邮件通知
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
dev1 用户对相应的 PR 描述的问题处理完毕后，将 PR 的状态修改为 "analyzed"；
</para>
<para>
dev1 用户是模块1 的负责人，收到 test1 的邮件通知之后，根据邮件通知，解决相应 PR 描述的问题，解决问题之后，dev1 用户登录 Bug Tracking 系统，将状态修改为 "ananyzed"；
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-8-dev1-query.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
dev1 查询 PR，点击 "edit" 链接，进入编辑界面
</para>
</caption>
</mediaobject>
<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-9-dev1-analyzed.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
将 PR 状态修改为 "ananyzed"，在 Fixed 字段填入相应的解决方案的描述
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
每次对 PR 的修改，都在 Audit Trail 字段里留下修改记录；
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-10-dev1-trail.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
Audit Trail 字段里显示修改记录
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
dev1 用户对 PR 的修改，将以邮件形式通知 PR 的创建者 test1；
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-11-dev1-mailto-test1.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
test1 用户收到 dev1 用户关于 Bug 已经修正的邮件通知
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
test1 用户检验 dev1 的改动，如果 PR 确实已经修正，修改相应 PR 的状态为 "closed"
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-12-test1-closed.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
test1 将 PR 的状态修改为 "closed"
</para>
</caption>
</mediaobject>
</listitem>

<listitem>
<para>
dev1 用户收到 test1 用户发出的 PR 已经关闭的邮件通知；
</para>
<mediaobject>
<imageobject>
<imagedata fileref="images/gnats-13-test1-mailto-dev1.png" format="PNG"/>
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
<caption>
<para>
dev1 用户收到 PR 已经 "closed" 的邮件通知
</para>
</caption>
</mediaobject>
</listitem>
</itemizedlist>
<para>
从上面的流程可以看出，GNATS 的 PR 管理工作流程和 Starteam Change Request 管理流程是多么的相似，而且 GNATS 用户可以随意定制 PR 的状态，模拟出和 Starteam 一模一样的工作流程。下面介绍 GNATS 的安装和配置。
</para>

</sect2>

<sect2><title>GNATS 安装和配置</title>

<orderedlist>
<listitem>
<para>
下载最新的安装包，确认 GNATS 和 Gnatsweb 版本是否匹配
</para>
<para>
下载 GNATS 4 beta2: <ulink url="ftp://ftp.gnu.org/gnu/gnats/gnats-3.999.2.tar.gz">ftp://ftp.gnu.org/gnu/gnats/gnats-3.999.2.tar.gz</ulink> ；
</para>
<para>
直接从 CVS 服务器检出 Gnatsweb 4: <command>cvs -z3 -d:pserver:anoncvs@subversions.gnu.org:/cvsroot/gnatsweb co gnatsweb</command> ；
</para>
<note>
<para>
注意 GNATSWEB 和 GNATS 的版本是否兼容，Gnatsweb 2.9.x 和 GNATS 3.113.1 版本兼容，Gnatsweb 3.99.x 和 GNATS 3.999.x 兼容。
</para>
</note>
</listitem>

<listitem>
<para>
建立名为 gnats 的账号
</para>
<para>
创建 gnats 用户账号，系统维护以 gnats 身份运行，以减少系统安全风险。
</para>
<screen>
$ useradd gnats
</screen>
</listitem>

<listitem>
<para>
安装 GNATS
</para>
<para>
以 root 用户登录，执行下列命令
</para>
<screen>
$ tar zxvf gnats-3.999.2.tar.gz <co id="co.gnats.unzip"/>
$ cd gnats-3.999.2 
$ configure --prefix=/usr/local/gnats <co id="co.gnats.configure"/>
$ make all info <co id="co.gnats.make"/>
$ make install install-info <co id="co.gnats.makeinstall"/>
</screen>
<calloutlist>
<callout arearefs="co.gnats.unzip">
<para>
下载的 GNATS 4 安装包解包至路径 gnats-3.999.2 下。3.999... = 4 ？ 不觉想起来上小学时，问老师 0.999...（无限循环）和 1 谁大的趣事。
</para>
</callout>
<callout arearefs="co.gnats.configure">
<para>
将 GNATS 安装在路径 /usr/local/gnats 下，确省为 /usr/local。
</para>
</callout>
<callout arearefs="co.gnats.make">
<para>
make all: 编译所有的应用程序；make info：生成帮助信息；
</para>
</callout>
<callout arearefs="co.gnats.makeinstall">
<para>
make install: 安装编译完毕的的应用程序；make install-info：安装帮助信息；
</para>
</callout>
</calloutlist>
<!--

gnats 目录结构；
将 二进制程序 加入搜索路径；
/usr/local/gnats/bin
/usr/local/gnats/libexec/gnats

-->
</listitem>

<listitem>
<para>
到底安装了些什么？
</para>

<itemizedlist>
<listitem>
<para>
/usr/local/gnats/bin
</para>
<para>
GNATS 工具。应将此路径加入 PATH 环境变量，或者在 /usr/local/bin 中建立符号链接。
</para>
</listitem>
<listitem>
<para>
/usr/local/gnats/libexec/gnats/
</para>
<para>
GNATS 维护工具。应将此路径加入 PATH 环境变量，或者在 /usr/local/bin 中建立符号链接。
</para>
</listitem>
<listitem>
<para>
/usr/local/gnats/etc/gnats/
</para>
<para>
GNATS 全局配置信息。可以由 databases 文件将一台服务器配置为多个项目提供缺陷追踪服务（database）；gnatsd.host_access 用于控制基于主机地址的安全选项。
</para>
</listitem>
<listitem>
<para>
/usr/local/gnats/etc/gnats/defaults/
</para>
<para>
GNATS 服务器配置信息模板。每配置一个 GNATS 缺陷追踪服务（database），将该路径下的文件作为模板复制到项目各自独立的配置目录中，如确省的配置目录为 /usr/local/gnats/com/gnatsdb/gnats-adm。其中 gnatsd.user_access 用于配置用户名和口令，dbconfig 数据库配置文件；categories 文件用于设置类别；responsible 设置负责人的邮件地址等。
</para>
</listitem>
</itemizedlist>

</listitem>

<listitem>
<para>
配置确省的数据库
</para>
<para>
这里说的数据库不是我们经常听到的关系型数据库，而是指 GNATS 为一个项目提供缺陷追踪的一组配置文件和相应数据，GNATS 实际上是以文本文件形式存储的。
在配置文件文件 databases 中，确省设置了一个名为 default 的数据库。
</para>
<screen>
default:Bug database:/usr/local/gnats/com/gnatsdb
</screen>
<para>
运行 mkdb 维护工具，初始化确省数据库。
</para>
<screen>
$ <command>mkdb default</command>
Copying default files from /usr/local/gnats/etc/gnats/defaults
</screen>
<para>
mkdb 简单的将配置文件模板从 /usr/local/gnats/etc/gnats/defaults 目录下拷贝到指定的路径下。
</para>
<para>
/usr/local/gnats/com/gnatsdb/gnats-adm 目录存放配置文件，初始来自于配置文件模板的拷贝；
</para>
<para>
/usr/local/gnats/com/gnatsdb/pending 目录存放未知分类（Category）的 PR；
</para>
<para>
/usr/local/gnats/com/gnatsdb/gnats-queue 目录存放等待处理的 PR；
</para>
<para>
其它目录对应于各自的 Category 名称，存储对应 Category 的 PR，由此我们看出 PR 的 Category 命名为上述的三个保留名称。
</para>
</listitem>

<listitem>
<para>
设置 crontab
</para>
<para>
为避免 DOS 攻击，用户提交的 PR，先进入缓冲队列，待 queue-pr 命令执行时，方进行投递。因此将 queue-pr 加入 crontab，定时执行。
</para>
<screen>
$ crontab -e
0,10,20,30,40,50 * * * * exec-prefix/libexec/gnats/queue-pr --run
</screen>
</listitem>

<listitem>
<para>
设置邮件别名
</para>
<para>
因为 GNATS 初始设计为使用 Email 即可工作，因此需要设置邮件别名，通过管道，将邮件送交 GNATS 工具处理。将如下内容加入邮件别名文件（/etc/aliases）：
</para>
<screen>
gnats-admin: root
bugs: "| exec-prefix/libexec/gnats/queue-pr -q"
query-pr: "| exec-prefix/libexec/gnats/mail-query"
</screen>
<note>
<para>
注意：如果 sendmail 设置了 smrsh，需要将 queue-pr 和 mail-query 配置为 sendmail 可以执行的命令。简单的，可能只需要在 /etc/smrsh 目录下建立相应的符号链接。
</para>
</note>
</listitem>

<listitem>
<para>
运行守护进程
</para>
<para>
GNATS 的守护进程是最为重要的一环，它使 GNATS 支持多种 PR 方式。
</para>
<para>
确认是否在 /etc/services 中配置了相应的服务，服务名为 support
</para>
<screen>
support 1529/tcp # GNATS
</screen>
<para>
配置以 inetd 或 xinetd 方式执行 gnatsd （守护进程）。
</para>
<para>
对于 inetd，在 /etc/inetd.conf 中加入：
</para>
<screen>
support stream tcp nowait gnats /usr/local/gnats/libexec/gnats/gnatsd gnatsd
</screen>
<para>
对于 inetd，在 /etc/xinetd.d/ 目录下加入文件 support，内容如下：
</para>
<screen>
service support
{
disable = no
socket_type = stream
protocol = tcp
wait = no
user = gnats
server = /usr/local/gnats/libexec/gnats/gnatsd
}
</screen>
</listitem>
</orderedlist>

<para>
至此，完成了 GNATS 的安装。但是，如果只凭借命令行工具 send-pr，和 Email 来提交和管理 PR，显然太专业而难以推广，不具有竞争力。因此 Gnatsweb 几乎成了唯一选择。下面马上来安装 Gnatsweb。</para>

<orderedlist>
<listitem>
<para>
注意版本兼容
</para>
<para>
Gnatsweb 2.9.x 和 GNATS 3.113.1 版本兼容，Gnatsweb 3.99.x 和 GNATS 3.999.x 兼容。Gnatsweb 3.99.x 在本文撰写之时，只能通过 CVS 检出代码。
</para>
<screen>
$ <command>cvs -z3 -d:pserver:anoncvs@subversions.gnu.org:/cvsroot/gnatsweb login</command>
$ <command>cvs -z3 -d:pserver:anoncvs@subversions.gnu.org:/cvsroot/gnatsweb co gnatsweb</command>
</screen>
</listitem>
<listitem>
<para>
GNATS 权限设置
</para>
<para>
Gnatsweb 作为 cgi 程序运行在 WEB 服务器上，需要在 GNATS 服务器上配置 WEB服务器的访问权限。
</para>
<para>
有两种方法，一种是在全局的 gnatsd.host_access 配置文件中设置 WEB 服务器的 IP 地址具有 edit 权限，如下：
</para>
<screen>
127.0.0.1:edit:
</screen>
<para>
由于 GNATS 的权限设置的特殊性，权限只能升不能降，因此各自数据库设置的用户权限全部实效，所有用户都至少拥有 edit 权限，即修改 PR 的权限。
</para>
<para>
另外，就是在全局的 gnatsd.host_access 配置文件中设置 WEB 服务器的 IP 地址具有比较低的权限：
</para>
<screen>
127.0.0.1:listdb:
</screen>
<para>
再在各自独立的数据库配置文件中设置用户的权限。
</para>
</listitem>

<listitem>
<para>
修改 gnatsweb-site.pl 脚本中的 GNATS 主机名和端口号
</para>
<para>
确省的主机名为 localhost，确省端口为 1529。若实际配置有变，灵活修改之。
</para>
</listitem>

<listitem>
<para>
确认是否安装了所需的 PERL 包
</para>
<screen>
$ perl -MCPAN -e 'install CGI'
$ perl -MCPAN -e 'install MIME::Base64'
</screen>
</listitem>

<listitem>
<para>
测试链接
</para>
<screen>
$ make test USERNAME=user PASSWORD=password DATABASE=default
</screen>
<para>
错误的输出：
</para>
<screen>
<![CDATA[
connect...........................................FAIL

Gnatsweb was unable to connect to the GNATS server.

There are several possible reasons for this.  Start off by checking
that the USERNAME, PASSWORD and DATABASE parameters you supplied are
valid.  If they are, there may be a problem in the configuration of
your GNATS server.  Check your GNATS installation, particularly the
host access files (remember that the web server needs access to the
GNATS server), then run the tests again.

make: *** [test] Error 9
]]>
</screen>
<para>
正确的输出：
</para>
<screen>
<![CDATA[
connect...........................................pass
query.............................................pass
fix_email_addrs 1.................................pass
fix_email_addrs 2.................................pass
fix_email_addrs 3.................................pass
fix_email_addrs 4.................................pass
fix_email_addrs 5.................................pass
trim_responsible 1................................pass
trim_responsible 2................................pass
trim_responsible 3................................pass
All tests passed.
]]>
</screen>
</listitem>

<listitem>
<para>
开始安装
</para>
<para>
需要指定网站的 cgi-bin 目录。关于 Apache 配置 CGI，请参见相关章节，在此不再赘述。
</para>

<screen>
$ make install CGI_DIR=/usr/local/apache/cgi-bin
</screen>
<para>
其实，只是将脚本 gnatsweb.pl 和 gnatsweb-site.pl 简单的拷贝到路径 /usr/local/apache/cgi-bin 之下。
</para>
</listitem>

<listitem>
<para>
访问 Gnatsweb
</para>
<para>
打开浏览器，访问网址：<ulink url="http://localhost/cgi-bin/gnatsweb.pl">http://localhost/cgi-bin/gnatsweb.pl</ulink>。
</para>
</listitem>
</orderedlist>
</sect2>

</sect1>


<sect1 id="mantis"><title>Mantis</title>
<para>
Mantis —— 螳螂，名字一望便知是一个不错的除虫能手。Mantis 一个多么适合 Bug Tracking 的软件名字啊。
</para>
<para>
Mantis是基于 PHP/MySQL 的 Web-based 缺陷跟踪系统 。
</para>
<para>
链接
</para>

<itemizedlist>
<listitem>
<para>
网站
</para>
<para>
<ulink url="http://www.mantisbt.org/"/>
</para>
</listitem>
<listitem>
<para>
代码
</para>
<para>
<command>cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/mantisbt co -P -d mantis  .</command>
</para>
</listitem>
</itemizedlist>

<sect2><title>Mantis 改进</title>
<para>
WHODO 的 Bug tracking 系统采用的就是 Mantis，做了如下改动：
</para>

<itemizedlist>
<listitem>
<para>
<ulink url="http://bugs.mantisbt.org/view.php?id=6844">修改 Bug 状态后，显示邮件发送的目标地址</ulink>
</para>
<para>
虽然 mantis 的邮件发送管理相当完善，但是我比较不喜欢他的黑箱操作，更喜欢明明白白的知道，到底邮件发到哪里去了。
相关补丁，已经提供 bugs.mantisbt.org 提交了。
</para>
</listitem>
<listitem>
<para>
修改 manage_config_workflow_page.php 对于权限阈值的处理
</para>
<para>
参见: <ulink url="http://bugs.mantisbt.org/view.php?id=6845">Bug 0006845</ulink>
</para>
</listitem>
<listitem>
<para>
界面风格的改动
</para>
<para>
参见: <ulink url="http://bugs.mantisbt.org/view.php?id=6849">Bug 0006849</ulink>
</para>
</listitem>
<listitem>
<para>
其它小的 bugfix
</para>
<para>
如: <ulink url="http://bugs.mantisbt.org/view.php?id=6843">Bug 0006843</ulink>, 
<ulink url="http://bugs.mantisbt.org/view.php?id=6850">Bug 0006850</ulink>, 
<ulink url="http://bugs.mantisbt.org/view.php?id=6852">Bug 0006852</ulink>, 
<ulink url="http://bugs.mantisbt.org/view.php?id=6867">Bug 0006867</ulink>, 
<ulink url="http://bugs.mantisbt.org/view.php?id=6868">Bug 0006868</ulink>, 
<ulink url="http://bugs.mantisbt.org/view.php?id=6869">Bug 0006869</ulink>, 
</para>
</listitem>
</itemizedlist>

</sect2>
</sect1>

<sect1 id="bugzilla"><title>Bugzilla</title>
<para>
应该算是老牌的 Bug tracking 系统了，基于 Perl + MySQL 开发的。不过本人的 Perl 水平仅限于几十行的小脚本。因此一直没有深入研究 Bugzilla。
</para>
</sect1>

</article>